program = { SOI ~ statement* ~ EOI }

statement = { ((function_call | action_call) ~ ";") | action_definition }

function_call =  { identifier ~ "(" ~ arguments? ~ ")" }
argument      = _{ expression }
arguments     =  { (argument ~ ("," ~ argument)?)? }

action_definition = {
    identifier ~ "->" ~ "#" ~ "{" ~ action_body ~ "}"
}
action_body       = {
    // "id" ~ ":" ~ string ~ "," ~ "parameters" ~ ":" ~ dictionary_type ~ ","?
    action_id ~ "," ~ action_parameters ~ ","?
}
action_id         = { "id" ~ ":" ~ string }
action_parameters = { "parameters" ~ ":" ~ dictionary_type }
action_call       = {
    identifier ~ "#" ~ "(" ~ arguments ~ ")"
}

expression            =  { string | non_string_expression }
non_string_expression =  { identifier }
identifier            = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// concatenated_string =  { expression ~ (".." ~ (expression))* }
string              =  {
    (literal_string | non_string_expression) ~ (".." ~ (literal_string | non_string_expression))*
}
literal_string      = ${ "\"" ~ inner ~ "\"" }
inner               = @{ char* }
char                =  {
    !("\"" | "\\") ~ (ANY ~ !("￼" /* Object Replacement Character */
  ))
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

type                      = {
    string_type
  | number_type
  | date_type
  | data_type
  | boolean_type
  | array_type
  |  dictionary_type // TODO: Change to `dict`
}
string_type               = { "string" }
number_type               = { "number" }
date_type                 = { "date" }
data_type                 = { "data" }
boolean_type              = { "boolean" }
text_type                 = { "text" }
array_type                = { "[" ~ (type ~ ("," ~ type)* ~ ","?)? ~ "]" }
dictionary_type           = {
    "{" ~ (dictionary_type_key_value ~ ("," ~ dictionary_type_key_value)* ~ ","?)? ~ "}"
}
dictionary_type_key_value = {
    identifier ~ ":" ~ type
}

// Whitespace
WHITESPACE = _{ WHITE_SPACE | NEWLINE | " " | "\t" }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* }
